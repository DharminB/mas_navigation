#!/usr/bin/python

import rospy
import geometry_msgs
import mcr_navigation_msgs.srv
import std_srvs.srv
import tf

from simple_script_server import *
##sss = simple_script_server()
        
# main
def main():
    rospy.init_node('base_placement_test_script')

    ### tf listener
    tf_listener = tf.TransformListener()

    ##sss.move("arm", "home")
    ##sss.move("arm", "pregrasp_front_init")
    
    # BASE PLACEMENT
    moveoptimalbase_srv = rospy.ServiceProxy('/mcr_navigation/relative_movements/move_base_relative', mcr_navigation_msgs.srv.RelativeMovements) 


    ##print "wait for service: /mcr_navigation/relative_movements/move_base_relative"   
    ##rospy.wait_for_service('/mcr_navigation/relative_movements/move_base_relative', 30)

    print "wait for service: /mcr_navigation/relative_movements/move_base_relative"   
    rospy.wait_for_service('/mcr_navigation/relative_movements/move_base_relative', 30)

    goalpose = geometry_msgs.msg.PoseStamped()
    goalpose.pose.position.x = 0.1234
    goalpose.pose.position.y = 0.0055
    goalpose.pose.position.z = 0.1
    quat = tf.transformations.quaternion_from_euler(0,0,0)
    goalpose.pose.orientation.x = quat[0]
    goalpose.pose.orientation.y = quat[1]
    goalpose.pose.orientation.z = quat[2]
    goalpose.pose.orientation.w = quat[3]
    
    print "GOAL POSE TRANSFORMED: ", goalpose
    # call base placement service
    base_pose = moveoptimalbase_srv(goalpose)  

    print base_pose.status

if __name__ == '__main__':
    main()
